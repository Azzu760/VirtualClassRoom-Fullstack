generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  role      String    // "teacher" or "student"
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relationships
  classroomsCreated Classroom[] @relation("TeacherClassrooms")
  enrollments       Enrollment[]
  announcements     Announcement[]
  assignments       Assignment[]
  submissions      Submission[]
  grades            Grade[]
  materials         Material[]
  dismissedNotifications DismissedNotification[]
}

model Classroom {
  id          String      @id @default(cuid())
  name        String
  code        String      @unique
  subject     String?
  status      String      @default("active") 
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relationships
  teacherId   String
  teacher     User        @relation("TeacherClassrooms", fields: [teacherId], references: [id])
  enrollments Enrollment[]
  announcements Announcement[]
  assignments Assignment[]
  materials   Material[]
}

model Enrollment {
  id          String    @id @default(cuid())
  userId      String
  classroomId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  user        User      @relation(fields: [userId], references: [id])
  classroom   Classroom @relation(fields: [classroomId], references: [id])

  @@unique([userId, classroomId])
}

model Announcement {
  id          String    @id @default(cuid())
  title       String
  content     String
  datePosted  DateTime  @default(now())
  classroomId String
  userId      String

  // Relationships
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model Assignment {
  id          String     @id @default(cuid())
  title       String
  description String
  dueDate     DateTime
  status      String     @default("published")
  classroomId String
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // File storage fields (using BYTEA for direct storage)
  fileData    Bytes?     // Actual binary file content
  fileName    String?
  fileType    String?    // MIME type
  fileSize    Int?       // Size in bytes

  // Relationships
  classroom   Classroom  @relation(fields: [classroomId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
  submissions Submission[]
  grades      Grade[]
}

enum SubmissionStatus {
  NOT_SUBMITTED
  SUBMITTED
  LATE
  GRADED
}

model Submission {
  id           String           @id @default(cuid())
  assignmentId String
  userId       String
  
  // File storage fields
  fileData     Bytes     
  fileName     String
  fileType     String
  fileSize     Int
  
  // Status field
  status       SubmissionStatus @default(NOT_SUBMITTED)
  
  // Timestamps
  submittedAt  DateTime?
  grade        Float?
  feedback     String?
  gradedAt     DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relationships
  assignment   Assignment       @relation(fields: [assignmentId], references: [id])
  user         User             @relation(fields: [userId], references: [id])
}

model Grade {
  id           String    @id @default(cuid())
  score        Float
  feedback     String?
  assignmentId String
  userId       String

  // Relationships
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model Material {
  id          String    @id @default(cuid())
  title       String
  description String?
  type        String    // "file" or "link"
  url         String?
  fileName    String?
  fileType    String?
  fileSize    Int?
  fileData    Bytes?
  classroomId String
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model DismissedNotification {
  id             String   @id @default(cuid())
  userId         String
  notificationId String
  notificationType String // 'grade', 'announcement', 'assignment', 'material'
  dismissedAt    DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id])

  @@unique([userId, notificationId, notificationType])
}